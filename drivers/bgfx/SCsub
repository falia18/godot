#!/usr/bin/env python

Import("env")

thirdparty_obj = []
thirdparty_bx_dir = "#thirdparty/bx/"
thirdparty_bimg_dir = "#thirdparty/bimg/"
thirdparty_bgfx_dir = "#thirdparty/bgfx/"

thirdparty_bx_sources = [
    "src/allocator.cpp",
    "src/bounds.cpp",
    "src/bx.cpp",
    "src/commandline.cpp",
    "src/crtnone.cpp",
    "src/debug.cpp",
    "src/dtoa.cpp",
    "src/easing.cpp",
    "src/file.cpp",
    "src/filepath.cpp",
    "src/hash.cpp",
    "src/math.cpp",
    "src/mutex.cpp",
    "src/os.cpp",
    "src/process.cpp",
    "src/semaphore.cpp",
    "src/settings.cpp",
    "src/sort.cpp",
    "src/string.cpp",
    "src/thread.cpp",
    "src/timer.cpp",
    "src/url.cpp"
]

thirdparty_bx_sources = [thirdparty_bx_dir + file for file in thirdparty_bx_sources]


thirdparty_bimg_sources = [
    "src/image.cpp",
    "src/image_gnf.cpp",
    "3rdparty/astc-encoder/source/astcenc_averages_and_directions.cpp",
    "3rdparty/astc-encoder/source/astcenc_block_sizes.cpp",
    "3rdparty/astc-encoder/source/astcenc_color_quantize.cpp",
    "3rdparty/astc-encoder/source/astcenc_color_unquantize.cpp",
    "3rdparty/astc-encoder/source/astcenc_compress_symbolic.cpp",
    "3rdparty/astc-encoder/source/astcenc_compute_variance.cpp",
    "3rdparty/astc-encoder/source/astcenc_decompress_symbolic.cpp",
    "3rdparty/astc-encoder/source/astcenc_diagnostic_trace.cpp",
    "3rdparty/astc-encoder/source/astcenc_entry.cpp",
    "3rdparty/astc-encoder/source/astcenc_find_best_partitioning.cpp",
    "3rdparty/astc-encoder/source/astcenc_ideal_endpoints_and_weights.cpp",
    "3rdparty/astc-encoder/source/astcenc_image.cpp",
    "3rdparty/astc-encoder/source/astcenc_integer_sequence.cpp",
    "3rdparty/astc-encoder/source/astcenc_mathlib.cpp",
    "3rdparty/astc-encoder/source/astcenc_mathlib_softfloat.cpp",
    "3rdparty/astc-encoder/source/astcenc_partition_tables.cpp",
    "3rdparty/astc-encoder/source/astcenc_percentile_tables.cpp",
    "3rdparty/astc-encoder/source/astcenc_pick_best_endpoint_format.cpp",
    "3rdparty/astc-encoder/source/astcenc_quantization.cpp",
    "3rdparty/astc-encoder/source/astcenc_symbolic_physical.cpp",
    "3rdparty/astc-encoder/source/astcenc_weight_align.cpp",
    "3rdparty/astc-encoder/source/astcenc_weight_quant_xfer_tables.cpp"
]

thirdparty_bimg_sources = [thirdparty_bimg_dir + file for file in thirdparty_bimg_sources]

thirdparty_bgfx_sources = [
    "src/bgfx.cpp",
    "src/debug_renderdoc.cpp",
    "src/dxgi.cpp",
    "src/glcontext_egl.cpp",
    "src/glcontext_html5.cpp",
    "src/glcontext_wgl.cpp",
    "src/nvapi.cpp",
    "src/renderer_agc.cpp",
    "src/renderer_d3d11.cpp",
    "src/renderer_d3d12.cpp",
    "src/renderer_gl.cpp",
    "src/renderer_gnm.cpp",
    "src/renderer_noop.cpp",
    "src/renderer_nvn.cpp",
    "src/renderer_vk.cpp",
    "src/shader.cpp",
    "src/shader_dxbc.cpp",
    "src/shader_spirv.cpp",
    "src/topology.cpp",
    "src/vertexlayout.cpp"
]

thirdparty_bgfx_sources = [thirdparty_bgfx_dir + file for file in thirdparty_bgfx_sources]



# bx
envbgfx = env.Clone()
envbgfx.disable_warnings()

print(env["MSVC_VERSION"])

if env.msvc: #/Ob2 for inline expansion?
    envbgfx.Append(CXXFLAGS=["/Zc:__cplusplus", "/Zc:preprocessor"])
    envbgfx.Prepend(CPPPATH=[thirdparty_bx_dir, thirdparty_bx_dir + "/include/compat/msvc"])
    

if env.dev_build:
    envbgfx.Append(CXXFLAGS=["-DBX_CONFIG_DEBUG=1"])
else:
    envbgfx.Append(CXXFLAGS=["-DBX_CONFIG_DEBUG=0"])

envbgfx.Prepend(CPPPATH=[thirdparty_bx_dir, thirdparty_bx_dir + "/include"])
envbgfx.Prepend(CPPPATH=[thirdparty_bx_dir, thirdparty_bx_dir + "/3rdparty"])

envbgfx.Prepend(CPPPATH=[thirdparty_bimg_dir, thirdparty_bimg_dir + "/include"])
envbgfx.Prepend(CPPPATH=[thirdparty_bimg_dir, thirdparty_bimg_dir + "/3rdparty/astc-encoder/include"])

envbgfx.Prepend(CPPPATH=[thirdparty_bgfx_dir, thirdparty_bgfx_dir + "/include"])
envbgfx.Prepend(CPPPATH=[thirdparty_bgfx_dir, thirdparty_bgfx_dir + "/3rdparty"])
envbgfx.Prepend(CPPPATH=[thirdparty_bgfx_dir, thirdparty_bgfx_dir + "/3rdparty/khronos"]) #TODO: Except NX

for i in thirdparty_bx_sources:
    envbgfx.add_source_files(thirdparty_obj, i)
envbgfx.add_source_files(thirdparty_obj, thirdparty_bimg_sources)
envbgfx.add_source_files(thirdparty_obj, thirdparty_bgfx_sources)


if env["platform"] == "linuxbsd":
    envbgfx.Prepend(CPPPATH=[thirdparty_bgfx_dir, thirdparty_bgfx_dir + "3rdparty/directx-headers/include/directx"]),
    envbgfx.Prepend(CPPPATH=[thirdparty_bgfx_dir, thirdparty_bgfx_dir + "3rdparty/directx-headers/include"]),
    envbgfx.Prepend(CPPPATH=[thirdparty_bgfx_dir, thirdparty_bgfx_dir + "3rdparty/directx-headers/include/wsl/stubs"]),

elif env["platform"] == "macos" or env["platform"] == "ios":
    envbgfx.add_source_files(thirdparty_obj, ["src/renderer_*.mm"])


env.drivers_sources += thirdparty_obj


# Godot source files

driver_obj = []

envbgfx.add_source_files(driver_obj, "*.cpp")
env.drivers_sources += driver_obj

# Needed to force rebuilding the driver files when the thirdparty code is updated.
env.Depends(driver_obj, thirdparty_obj)
